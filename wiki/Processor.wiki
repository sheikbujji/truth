#summary Building a pipelined 32-bit processor

= Introduction =

 Processor consists of control and datapath parts.

  * Control: Generate control signals for every decoded instruction
  * Datapath: Actual computations are done by using ALUs, registers, and so on. It is controlled by control signals. It can be pipelined (i.e., with latches between each pipeline stage).

 ==프로세서 제작 강좌==

 1. 개발환경

 하드웨어인 프로세서는 HDL(Hardware Description Language)이라고 하는 프로그래밍 언어를 사용해서 작성된다. 널리 사용되는 HDL에는 VHDL과 Verilog가 있다. 본 강좌에서는 VHDL을 기본으로 한다. VHDL 언어의 문법과 관련해서는 시중에 판매되는 관련 도서를 참조하길 바란다. 
 
 다양한 개발 프로세스가 존재하지만 본 강좌에서는 FPGA 보드를 사용하여 개발하는 한 방법을 기본으로 한다. 그림 1에 표현된 것과 같이 HDL을 사용하여 하드웨어를 설계하면 이를 컴파일하여 시뮬레이션을 수행할 수 있다. 시뮬레이션은 하드웨어의 입력, 출력, 또는 내부의 디지털 신호에 대한 파형을 시간축에 그리는 것이다. 예를들면, 특정한 입력 신호를 주고 출력 신호를 예측치와 비교하여 설계를 검증하는 것이다. 시뮬레이션이 끝나면 HDL 프로그래밍을 합성하여 하드웨어로 제작이 가능한 이미지(##) 파일을 생성하게 된다. 합성은 일반적으로 시간이 많이 소요되기 때문에 시뮬레이션을 통해서 설계가 충분히 검증된 이후에 비빈번하게 수행된다. 이때 생성된 이미지는 특정 FPGA에 맞게 제작된 것으로 FPGA의 내부 구성을 바탕으로 디지털 회로의 배치하고 연결해 (Placement & Routing, P&R) 생성된다. 이 이미지를 FPGA를 프로그래밍할 수 있는 툴을 사용하여 실제 FPGA 보드에 실장하면 합성한 하드웨어를 물리적인 하드웨어 장비 상에서 구동할 수 있다. 실장되어 구동되는 하드웨어를 테스트하고 검증하기 위해서는 부가적으로 하드웨어 또는 소프트웨어 디버거를 사용한다.

  HDL 프로그램 --(컴파일)--> 시뮬레이션 --(합성)--> 프로그램 이미지 --(FPGA 프로그래밍)--> 실행
  그림 1.

 이상에서 소개된 하드웨어 제작과정에 필요한 개발도구로 본 강좌에서 사용되는 툴은 표 1과 같다.

 - RTL Simulator: Model Sim
 - RTL Synthesizer: 
 - FPGA Programmer:
 - FPGA Board: 
 - HW or SW Debugger:
 표 1. 
 
 

= Details =