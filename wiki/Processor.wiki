#summary Building a pipelined 32-bit processor

 =Introduction=
 One important concept in processor design is the fact that processor consists of control, datapath, and memory (as well as I/Os). *Datapath* is a hardware logic that processes and manipulates given input data, changes its internal states, and generates output data. Datapath can support many different operations, and one of those supportable operations is selected by control signals. Control signals are generated by a *control* engine that decodes every fetched instruction and generates control signals for decoded instruction. All those instructions are fetched from memory that also stores computation data because datapath can contain a small size of data (e.g., several 10's of 4bytes).

 Another important concept is pipelining.


 =프로세서 제작=

 ==1. 개발환경==

 하드웨어인 프로세서는 HDL(Hardware Description Language)이라고 하는 프로그래밍 언어를 사용해서 작성된다. 널리 사용되는 HDL에는 VHDL과 Verilog가 있다. 본 강좌에서는 VHDL을 기본으로 한다. VHDL 언어의 문법과 관련해서는 시중에 판매되는 관련 도서를 참조하길 바란다. 
 
 다양한 개발 프로세스가 존재하지만 본 강좌에서는 FPGA 보드를 사용하여 개발하는 한 방법을 기본으로 한다. 그림 1에 표현된 것과 같이 HDL을 사용하여 하드웨어를 설계하면 이를 컴파일하여 시뮬레이션을 수행할 수 있다. 시뮬레이션은 하드웨어의 입력, 출력, 또는 내부의 디지털 신호에 대한 파형을 시간축에 그리는 것이다. 예를들면, 특정한 입력 신호를 주고 출력 신호를 예측치와 비교하여 설계를 검증하는 것이다. 시뮬레이션이 끝나면 HDL 프로그래밍을 합성하여 하드웨어로 제작이 가능한 이미지(##) 파일을 생성하게 된다. 합성은 일반적으로 시간이 많이 소요되기 때문에 시뮬레이션을 통해서 설계가 충분히 검증된 이후에 비빈번하게 수행된다. 이때 생성된 이미지는 특정 FPGA에 맞게 제작된 것으로 FPGA의 내부 구성을 바탕으로 디지털 회로의 배치하고 연결해 (Placement & Routing, P&R) 생성된다. 이 이미지를 FPGA를 프로그래밍할 수 있는 툴을 사용하여 실제 FPGA 보드에 실장하면 합성한 하드웨어를 물리적인 하드웨어 장비 상에서 구동할 수 있다. 실장되어 구동되는 하드웨어를 테스트하고 검증하기 위해서는 부가적으로 하드웨어 또는 소프트웨어 디버거를 사용한다.

  HDL 프로그램 --(컴파일)--> 시뮬레이션 --(합성)--> 프로그램 이미지 --(FPGA 프로그래밍)--> 실행

  그림 1.

 이상에서 소개된 하드웨어 제작과정에 필요한 개발도구로 본 강좌에서 사용되는 툴은 표 1과 같다.

 - RTL Simulator: Model Sim
 - RTL Synthesizer: 
 - FPGA Programmer:
 - FPGA Board: 
 - HW or SW Debugger:

 표 1. 
 
 ===1.1. RTL Simulator===

 RTL Simulator로 Mentor Graphics사의 ModelSim 소프트웨어를 사용한다. 본 강좌에서는 RTL을 손으로 직접 작성하는데 시중에는 GUI(Graphics User Interface) 기반의 소프트웨어가 다수 존재하며 이들 소프트웨어에서는 사용자가 그린 디지털 회로도를 자동으로 HDL 언어로 변환해 준다. GUI 기반 도구의 사용은 프로세서의 마이크로 구조 및 타이밍 등의 관련 이슈를 이해하는데 매우 효과적인 방법이다. 왜냐하면 HDL은 마이크로 구조에 대한 고려 없이 보다 상위 수준에서 하드웨어를 작성할 수 있기 때문이다. HDL을 직접 작성하는 방법의 장점은 복잡한 하드웨어를 상대적으로 적은 비용을 들여서 개발할 수 있다는 점이며, 널리 알려진 코드 스타일을 잘 따르면 타이밍 등의 문제 없이 완성도 있는 하드웨어를 설계할 수 있다.

 (i) 소프트웨어 설치. ModelSim을 이 회사의 홈페이지에서 다운 받고 다운받은 파일을 실행하여 소프트웨어를 설치한다. 설치는 일반적인 소프트웨어 설치 방법과 동일하다. 추가적으로 설치가 완료된 후에 이 회사 홈페이지에 요구되는 신상 정보를 입력하고 라이센스 파일을 이메일로 수신받아 ModelSim 소프트웨어에 등록하는 작업이 필요하다.

 (ii) 프로젝트 생성. 설치가 완료되었으면 ModelSim을 실행하고 프로젝트를 생성한다. File 메뉴에서 New 메뉴항목 Project 메뉴 서브항목을 선택하고 프로젝트명을 trurh-proc (또는 원하는 이름)으로 설정한다. 프로젝트가 생성한 후 3개의 신규 파일을 추가한다. 각각 파일명은 control.vhd, datapath.vhd, 그리고 memory.vhd 이다.
 
 ==2. Datapath==

 Datapath는 Multi-Cycle 형태의 구현과 Piepline 형태의 구현 두가지로 나눌 수 있다. Multi-Cycle 형태는 ...

 Pipeline 방식의 Datapath는 복수의 Pipeline Stage를 갖으며 각 Stage 는 Combinational Logic 으로 구성되고 각 Stage 사이에는 Latch (또는 Flipflop)가 기억장소로 위치한다. Latch는 이전 Stage의 Combination Logic의 출력 값을 보관하고 다음 클럭 사이클에 이 보관된 값을 입력으로 이후 Stage에 전달하는 역할을 한다. 그림.

 이 강좌에서는 다음과 같은 5가지 간단한 Pipeline Stage를 갖는 프로세서를 설계한다.

  * Fetch
  * Decode
  * Execute
  * Memory
  * Writeback

 
= Details =