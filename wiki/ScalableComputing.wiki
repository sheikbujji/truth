#summary Thoughts on scalable computing

= Introduction =

 들어가며. 내가 가장 좋아하는 일 내가 가장 아름답다고 느끼는 일 내가 가장 완벽하다고(진리) 생각하는 일은 컴퓨팅이다. 내겐 이 컴퓨팅을 할 수 있는 가장 효율적인 도구를 설계하는 것 또한 동일한 가치의 일이다. 과학과 공학의 문제를 수학으로 모델링하고 이를 고속으로 연산해 해답을 구하는 과정에서 고속으로 정확한 연산을 가장 효과적으로 수행할 수 있는 구조를 설계하는 것 종합적인 이해와 다양한 계층의 기술에 대한 이해가 기반될 때 이 작업은 예술이 된다. 나의 사유속에서 다양한 설계 파라미터를 시뮬레이션하고 최적의 설계를 도출한다. 도출된 설계는 조직적 활동을 통해 구현되고 평가되어 검증된다. 이 인련의 과정이 내가 즐기는 것이고 15년 넘게 훈련하고 터득한 방법이다.

 인류의 컴퓨팅 능력 개선을 위한 노력은 끝없이 지속될 것이다. 컴퓨팅 능력은 인류의 지능을 대변하는 지표로 예를들면 이는 인류가 모델링하고 시뮬레이션하여 분석하고 예측할 수 있는 자연현상과 사회현상의 규모를 나타낸다. 자연과 인류에 대한 탐구는 영속될 것이기 때문에 컴퓨팅 능력 개선에 대한 인류의 욕구와 열망도 지속될 것이다.

 컴퓨팅 능력을 개선하는 방법은 몇가지로 분류가 가능하다.

 - 첫째는 Weak-Scaling 이라고 불리는 방법으로 프로그램의 입력 데이터의 규모를 확장해서 성능을 개선하는 방식이로 프로그램의 알고리즘에 이에 적합한 구조적 특성을 지닌 경우에만 적용이 가능하다.

 - 둘째는 Strong-Scaling 이라고 불리는 방법으로 프로그램이 동작하는 하드웨어의 병렬성 (예를 들면, 코어의 개수)을 높임으로써 성능을 개선하는 방식으로 프로그램의 알고리즘 자체가 높은 확장성을 갖도록 설계되고 구현되어야 한다.

 - 셋째는 위 두가지 방법과는 다르게 병렬성을 활용하지 않고 성능을 개선하는 방법으로 CPU의 성능(예를 들면, 클럭 주파수)를 개선을 통해서 프로그램의 성능을 개선하는 방식이다.

 가장 이상적인 방법은 Strong Scaling이나 현실적으로 많은 제약이 따른다.

 주제들

 - 어떤 프로그램이 높은 Scalability 를 요구하는가?

 - 어떤 제약이 있는가?

   - OS: Jitter 
   - PL: 병렬성의 표현? (X10)
   - HW: Cache Coherency
   - DS: Consensus or Clock Sync?

 - 기존의 연구들은 어떤 것이 있는가?

 - 어떻게 해결할 수 있을까?

 

= Details =

Add your content here.  Format your content with:
  * Text in *bold* or _italic_
  * Headings, paragraphs, and lists
  * Automatic links to other wiki pages